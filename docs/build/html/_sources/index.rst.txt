.. Shortest Path Finder documentation master file, created by
   sphinx-quickstart on Tue May 20 23:54:37 2025.
   You can adapt this file completely to your liking, but it should at least
   contain the root `toctree` directive.

Shortest Path Finder documentation
==================================
Azra Sugec


Add your content using ``reStructuredText`` syntax. See the
`reStructuredText <https://www.sphinx-doc.org/en/master/usage/restructuredtext/index.html>`_
documentation for details.


.. toctree::
   :maxdepth: 2
   :caption: Contents:

   modules


Shortest Path Finder Project – GMT211 Assignment 6
==================================================

This project calculates the shortest walking distance between two points using OpenStreetMap (OSM) data and visualizes it on an interactive HTML map. It was developed for the GMT211 course using Python packaging and documentation tools.

Project Highlights
------------------

- 📍 Based on real-world data from Hacettepe University's Beytepe Campus  
- 🧠 Uses Dijkstra’s algorithm via NetworkX  
- 🌍 Interactive maps generated with Folium  
- ✅ Tested with pytest  
- 📚 Documented using Sphinx

Main Function (shortest_path.py)
--------------------------------

.. code-block:: python

    import osmnx as ox
    import networkx as nx
    from geopy.distance import geodesic
    import folium

    def calculate_shortest_path_and_map(origin, destination, filename="map.html"):
        G = ox.graph_from_place("Hacettepe Üniversitesi Beytepe Kampüsü, Ankara, Türkiye", network_type='walk')
        orig_node = ox.distance.nearest_nodes(G, origin[1], origin[0])
        dest_node = ox.distance.nearest_nodes(G, destination[1], destination[0])
        route = nx.shortest_path(G, orig_node, dest_node, weight='length')
        route_coords = [(G.nodes[n]['y'], G.nodes[n]['x']) for n in route]
        distance_km = round(sum(geodesic(route_coords[i], route_coords[i+1]).km for i in range(len(route_coords)-1)), 2)

        m = folium.Map(location=origin, zoom_start=14)
        folium.PolyLine(route_coords, color="blue", weight=5, opacity=0.7).add_to(m)
        folium.Marker(location=origin, popup="Başlangıç").add_to(m)
        folium.Marker(location=destination, popup="Varış").add_to(m)
        mid_point = route_coords[len(route_coords)//2]
        folium.Marker(mid_point, popup=f"Mesafe: {distance_km} km", icon=folium.Icon(color="green")).add_to(m)

        m.save(filename)
        return distance_km

Test Function (test_shortest_path.py)
-------------------------------------

.. code-block:: python

    import sys
    import os
    sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

    from projekodlari.shortest_path import calculate_shortest_path_and_map

    def test_shortest_path_output():
        origin = (39.86570, 32.73369)
        destination = (39.87081, 32.73482)
        distance = calculate_shortest_path_and_map(origin, destination, filename="test_map.html")

        assert isinstance(distance, float)
        assert distance > 0
        assert os.path.exists("test_map.html")

Example Output
--------------

- `map.html` displays a blue path from the Geomatics Building to the Library
- A green popup shows the distance in kilometers (e.g., 0.67 km)
- The file is opened by simply running:

.. code-block:: bash

    python projekodlari/shortest_path.py


OpenStreetMap Output
---------------------

To view the interactive map generated by the program:

.. raw:: html

    <a href="../../map.html" target="_blank">
        <button style="padding: 10px 20px; font-size: 16px; background-color: #4CAF50; color: white; border: none; border-radius: 6px;">
            View map.html
        </button>
    </a>


GitHub Repository
-----------------

`GitHub Project Page <https://github.com/azrasugec/assignment6>`_

